module moore(input clk, input reset, input x, output reg parity);
 reg state, nextstate;
 parameter S0=0, S1=1;
always @(posedge clk or posedge reset)
if (reset)
 state <= S0;
else
 state <= nextstate;
always @(state)
begin
 case(state)
 S0: parity = 0;
 S1: parity = 1;
 endcase
end
always @(state or x)
begin
 nextstate = S0;
 case(state)
 S0: if(x)
 nextstate = S1;
 S1: if(!x)
 nextstate = S1;
 endcase
end
endmodule 

module moore_tb;
    reg clk;             
    reg reset;             
    reg x;              
    wire parity;           
    moore uut (.clk(clk),.reset(reset),.x(x),.parity(parity));
    initial begin
        clk = 0;
        forever #10 clk = ~clk; 
    end
    initial begin
        reset = 1;
        x = 0;
        #20 reset = 0;
        #20 x = 1;  
        #20 x = 0;
        #20 x = 1; 
        #20 x = 0; 
        #20 x = 1; 
        #20 x = 0;  
        #20 reset = 1;
        #20 reset = 0;
        #20 x = 1; 
        #20 x = 0;
        #50 $stop;
    end
endmodule
